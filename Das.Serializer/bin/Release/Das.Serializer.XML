<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Das.Serializer</name>
    </assembly>
    <members>
        <member name="M:Das.Extensions.ExtensionMethods.GetClearName(System.Type,System.Boolean)">
            <summary>
            Creates an easier to read string depiction of a type name, particularly
            with generics. Can be parsed back into a type using DasType.FromClearName(..)
            into
            </summary>
            <param name="type"></param>
            <param name="isOmitAssemblyName">Guarantees that the output string will be
            valid xml or json markup but may lead to slower deserialization</param>
        </member>
        <member name="M:Das.Extensions.ExtensionMethods.GetPropertyValues``1(``0)">
            <summary>
            Gets property name/type/values including nulls.
            Specify a base class or interface for the generic parameter to get a subset
            </summary>
        </member>
        <member name="M:Das.Types.DasTypeBuilder.GetDynamicType(System.String,System.Collections.Generic.IEnumerable{Das.Serializer.DasProperty},System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.EventInfo},System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo},System.Type[])">
            <summary>
            Returns the type along with property/method delegates.  Results are cached.
            </summary>
            <param name="typeName">The returned type may not get this exact name if a type with 
            the same name was created/invalidated</param>
            <param name="properties">List of properties to be added to the type.  Properties
            from an abstract base type or implemented interface(s) are added without specifying them here</param>
            <param name="isCreatePropertyDelegates">Specifies whether the PublicGetters
            and PublicSetters properties should have delegates to quickly get/set values
            for properties.</param>
            <param name="events">public events to be published by the Type</param>
            <param name="methodReplacements">For interface implementations, the methods
            are created but they return default primitives or null references</param>
            <param name="parentTypes">Can be a single unsealed class and/or 1-N interfaces</param>
        </member>
        <member name="M:Das.Types.DasTypeBuilder.GetDynamicType(System.String,System.Collections.Generic.IDictionary{System.Reflection.MethodInfo,System.Reflection.MethodInfo},System.Collections.Generic.IEnumerable{Das.Serializer.DasProperty},System.Collections.Generic.IEnumerable{System.Reflection.EventInfo},System.Type[])">
            <summary>
            Returns the type cached if it exists, builds/caches it otherwise
            </summary>
            <param name="typeName">The name of the type to be created</param>
            <param name="methodReplacements">or interface implementations, the methods
            are created but they return default primitives or null references</param>
            <param name="properties">properties from parent types do not need to be 
            specified</param>
            <param name="events">public events to be published by the Type</param>
            <param name="parentTypes">Can contain maximum one class and any amount of 
            interfaces</param>
            <returns></returns>
        </member>
        <member name="M:Das.Types.ObjectManipulator.SetProperty(System.Type,System.String,System.Object@,System.Object)">
            <summary>
            Attempts to set a property value for a targetObj which is a property of name propName
            in a class of type classType
            </summary>
            <param name="classType"></param>
            <param name="propName"></param>
            <param name="targetObj"></param>
            <param name="propVal"></param>
            <returns></returns>
        </member>
        <member name="M:Das.Types.TypeManipulator.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Returns a delegate that can be invoked to quickly get the value for an object
            of targetType
            </summary>        
        </member>
        <member name="M:Das.Types.TypeManipulator.CreateSetMethod(System.Reflection.MemberInfo)">
            <summary>
            Returns a delegate that can be invoked to quickly set the value for an object
            of targetType.  This method assumes this property has a setter. For properties
            without a setter use CreateReadOnlyPropertySetter
            </summary>
        </member>
        <member name="M:Das.Types.TypeManipulator.CreateAddDelegate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a delegate to add an object to a generic collection
            </summary>		
        </member>
        <member name="M:Das.Types.TypeManipulator.GetAdder(System.Collections.IEnumerable,System.Type)">
            <summary>
            Gets a delegate to add an object to a non-generic collection
            </summary>	
        </member>
        <member name="M:Das.Types.TypeManipulator.GetAddMethod``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Detects the Add, Enqueue, Push etc method for generic collections
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
        </member>
    </members>
</doc>
